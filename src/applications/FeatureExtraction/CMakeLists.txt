CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

SET( PROJECT_NAME FeatureExtraction )

# Set project name 
PROJECT( ${PROJECT_NAME} VERSION 1.6.1 LANGUAGES CXX )
#SET( PROJECT_VERSION "1.6.1")
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}" )

#MESSAGE( STATUS "PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}" )
INCLUDE_DIRECTORIES( 
  ${PROJECT_SOURCE_DIR}/src/depends/ 
  ${PROJECT_SOURCE_DIR}/../../cbica_toolkit/src/ 
  ${PROJECT_SOURCE_DIR}/../../thirdparty/
  ${PROJECT_SOURCE_DIR}/../../thirdparty/yaml-cpp/include/ 
)

#Find libraries
FIND_PACKAGE( ITK REQUIRED )
INCLUDE( ${ITK_USE_FILE} )

if(APPLE)
#  set(CMAKE_C_COMPILER "/usr/local/Cellar/llvm/6.0.1/bin/clang")
#  set(CMAKE_CXX_COMPILER "/usr/local/Cellar/llvm/6.0.1/bin/clang++")
#  set(OPENMP_LIBRARIES "/usr/local/Cellar/llvm/6.0.1/lib")
#  set(OPENMP_INCLUDES "/usr/local/Cellar/llvm/6.0.1/include")
#
#  OPTION (USE_OpenMP "Use OpenMP to enable <omp.h>" ON)
#
#  # Find OpenMP
#  if(USE_OpenMP)
#      if(CMAKE_C_COMPILER_ID MATCHES "Clang")
#          set(OpenMP_C "${CMAKE_C_COMPILER}")
#          set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
#          set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
#          set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
#          set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
#          set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
#      endif()
#      if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#          set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
#          set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
#          set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
#          set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#          set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#          set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#      endif()
#  endif()
#
#  if(USE_OpenMP)
#      find_package(OpenMP REQUIRED)
#  endif(USE_OpenMP)
#
#  if (OPENMP_FOUND)
#    include_directories("${OPENMP_INCLUDES}")
#    link_directories("${OPENMP_LIBRARIES}")
#    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
#    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
#    # set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
#  endif(OPENMP_FOUND)
else()
  FIND_PACKAGE(OpenMP REQUIRED)
  SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
  SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
endif()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED YES) 
SET_PROPERTY( GLOBAL PROPERTY USE_FOLDERS ON )

FILE( GLOB sources "${PROJECT_SOURCE_DIR}/src/depends/*.*" )
FILE( GLOB cbicatk "${PROJECT_SOURCE_DIR}/../../cbica_toolkit/src/*.*" )
FILE( GLOB_RECURSE YAMLCPP_Headers "${PROJECT_SOURCE_DIR}/../../thirdparty/yaml-cpp/src/*.h")
FILE( GLOB_RECURSE YAMLCPP_Sources "${PROJECT_SOURCE_DIR}/../../thirdparty/yaml-cpp/src/*.cpp")
SET( YAMLCPP_Headers ${YAMLCPP_Headers} CACHE STRING "YAML-CPP headers" FORCE )
SET( YAMLCPP_Sources ${YAMLCPP_Sources} CACHE STRING "YAML-CPP sources" FORCE )
SOURCE_GROUP( YAMLCPP_Headers FILES ${YAMLCPP_Headers} )
SOURCE_GROUP( YAMLCPP_Sources FILES ${YAMLCPP_Sources} )

# Add sources to executable
ADD_EXECUTABLE(
  ${PROJECT_NAME} 
  ${PROJECT_SOURCE_DIR}/src/FeatureExtraction.cxx
  ${PROJECT_SOURCE_DIR}/src/FeatureExtraction.h
  ${PROJECT_SOURCE_DIR}/src/FeatureExtraction.hxx
  ${sources}
  #${cbicatk}
  #${YAMLCPP_Sources}
)

SET( LIBNAME_CBICATK "CaPTk_CBICATK" )
IF(NOT (TARGET ${LIBNAME_CBICATK}))
  
  ADD_LIBRARY(
    ${LIBNAME_CBICATK}
    ${cbicatk}
    ${YAMLCPP_Sources}
  )
  
  TARGET_LINK_LIBRARIES(
    ${LIBNAME_CBICATK}
    ${ITK_LIBRARIES}
    ${OpenCV_LIBRARIES}
  )
  
ENDIF()

ADD_DEPENDENCIES( ${PROJECT_NAME} ${LIBNAME_CBICATK} )

# Link the libraries to be used
TARGET_LINK_LIBRARIES(
  ${PROJECT_NAME}
  ${LIBNAME_CBICATK}
)

OPTION( BUILD_REFERENCES "Build reference executables from CBICA pipeline" OFF )

IF( BUILD_REFERENCES )

  SET_PROPERTY( GLOBAL PROPERTY USE_FOLDERS ON )
  SET( StandAloneCLIAppsFolder "References")
  # find stand-alone CMD applications
  FILE( GLOB STANDALONE_APPS
    "${PROJECT_SOURCE_DIR}/src/reference/*.cxx"
  )

  INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/src/reference/ )
    
  FOREACH(application ${STANDALONE_APPS})

    GET_FILENAME_COMPONENT( STANDALONE_APP_NAME ${application} NAME_WE )

    ADD_EXECUTABLE( 
      ${STANDALONE_APP_NAME}
      ${PROJECT_SOURCE_DIR}/src/reference/${STANDALONE_APP_NAME}.cxx
    )
    
    TARGET_LINK_LIBRARIES( 
      ${STANDALONE_APP_NAME}
      ${ITK_LIBRARIES}
      ${OpenCV_LIBRARIES}
    )
    
    SET_TARGET_PROPERTIES( ${STANDALONE_APP_NAME} PROPERTIES FOLDER "${StandAloneCLIAppsFolder}" )
    
  ENDFOREACH()
  
ENDIF()

INSTALL( TARGETS ${PROJECT_NAME} 
  #DESTINATION bin  
  BUNDLE DESTINATION .
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  CONFIGURATIONS "${CMAKE_CONFIGURATION_TYPES}"
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)

INSTALL( FILES ${PROJECT_SOURCE_DIR}/data/1_params_default.csv DESTINATION data/features )
INSTALL( FILES ${PROJECT_SOURCE_DIR}/data/2_params_default_lattice.csv DESTINATION data/features )
INSTALL( FILES ${PROJECT_SOURCE_DIR}/data/batchMode/batch_featureExtraction.csv DESTINATION data/features/batchMode )

## this is for packaging only
SET( PROJECT_VENDOR "CBICA - UPenn" )
#SET( LICENSE_FILE "${PROJECT_SOURCE_DIR}/licenses/Combined.txt" )
SET( README_FILE  "${PROJECT_SOURCE_DIR}/README.txt" )
SET( PROJECT_DOMAIN "http://www.med.upenn.edu/sbia/software/" )
SET( PROJECT_CONTACT "software@cbica.upenn.edu" )
ADD_DEFINITIONS(-DPROJECT_NAME="${PROJECT_NAME}" )
ADD_DEFINITIONS(-DPROJECT_VERSION="${PROJECT_VERSION}" )
ADD_DEFINITIONS(-DEXE_NAME="${EXE_NAME}")
ADD_DEFINITIONS(-DCaPTk_Variant="${CaPTk_Variant}")
ADD_DEFINITIONS(-DPROJECT_NAME_EXTENDED="${PROJECT_NAME_EXTENDED}")
ADD_DEFINITIONS(-DCONTACT="${PROJECT_CONTACT}")
ADD_DEFINITIONS(-DPROJECT_CONTACT="${PROJECT_CONTACT}")
ADD_DEFINITIONS(-DPROJECT_DOMAIN="${PROJECT_DOMAIN}")
#ADD_DEFINITIONS(-DPROJECT_LICENSE="${LICENSE_FILE}")
#ADD_DEFINITIONS(-DLICENSE="${LICENSE_FILE}")
ADD_DEFINITIONS(-DPROJECT_README="${README_FILE}")
ADD_DEFINITIONS(-DREADME="${README_FILE}")
ADD_DEFINITIONS(-DPROJECT_SOURCE_DIR="${PROJECT_SOURCE_DIR}/")
ADD_DEFINITIONS(-DPROJECT_VARIANT="${${PROJECT_NAME}_Variant}")

# CPack settings
IF(WIN32)
  SET(CPACK_GENERATOR "NSIS")
  SET(CPACK_SOURCE_GENERATOR "ZIP")
  SET(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}") 
  SET(CPACK_NSIS_PACKAGE_NAME "${PROJECT_NAME}") 
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}\\\\${PROJECT_VERSION}")
  SET(CPACK_NSIS_INSTALL_ROOT "C:")
  SET(CPACK_NSIS_DEFINES "RequestExecutionLevel user")
  SET(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL "ON")
  SET(CPACK_NSIS_MUI_ICON "${DATA_DIR}/icons/application/windows/captk.ico")
  SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${EXE_NAME}.exe")
  #SET(CPACK_NSIS_INSTALLED_ICON_NAME "${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}")
  #SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${CPACK_NSIS_INSTALLED_ICON_NAME}")
  SET(CPACK_NSIS_HELP_LINK "https:\\\\\\\\www.med.upenn.edu\\\\sbia\\\\software\\\\")
  SET(CPACK_NSIS_CONTACT "${PROJECT_CONTACT}")
  SET(CPACK_NSIS_URL_INFO_ABOUT "https:\\\\\\\\www.med.upenn.edu\\\\sbia\\\\software\\\\")
  #SET(CPACK_NSIS_MODIFY_PATH "ON") # desktop shortcut doesn't work, for some reason
  # create extra shortcuts and respective uninstall targets 
  SET(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${EXE_NAME}.lnk' '\$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  #SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut '$DESKTOP\\\\${EXE_NAME}.lnk' '$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  #SET(CPACK_NSIS_CREATE_ICONS_EXTRA "  CreateShortCut '$INSTDIR\\\\${EXE_NAME}.lnk' '$INSTDIR\\\\bin\\\\${EXE_NAME}.exe'")
  SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\README.lnk' '\$INSTDIR\\\\share\\\\doc\\\\index.html'")
  #SET(CPACK_NSIS_DELETE_ICONS_EXTRA "  Delete '$SMPROGRAMS\\\\$START_MENU\\\\${EXE_NAME}.lnk'")
  SET(CPACK_NSIS_DELETE_ICONS "Delete '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${EXE_NAME}.lnk'")
  #SET(CPACK_NSIS_DELETE_ICONS "Delete '$DESKTOP\\\\${EXE_NAME}.lnk'")
  #SET(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete '$INSTDIR\\\\${EXE_NAME}.lnk'")
  SET(CPACK_NSIS_DELETE_ICONS "Delete '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\README.lnk'")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME "${EXE_NAME}") 
  SET(CPACK_SYSTEM_NAME "Win64")
ELSEIF(APPLE)
  SET(CMAKE_INSTALL_PREFIX "/Applications")
  SET(CPACK_GENERATOR "DragNDrop")
  SET(CPACK_DMG_FORMAT "UDBZ")
  SET(CPACK_DMG_VOLUME_NAME "${EXE_NAME}")
  SET(CPACK_SYSTEM_NAME "OSX")
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}/${PROJECT_VERSION}")
  #SET(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
  #SET(CPACK_DMG_DS_STORE "${ICONS_DIR}/DMGDSStore")
  #SET(CPACK_DMG_BACKGROUND_IMAGE "${ICONS_DIR}/DMGBackground.png")
ELSEIF(UNIX)
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}_${${PROJECT_NAME}_Variant}/${PROJECT_VERSION}")
  #SET(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
  SET(CPACK_CMAKE_GENERATOR "Unix Makefiles")
  SET(CPACK_GENERATOR "STGZ")
  SET(CPACK_SOURCE_GENERATOR "TGZ")
  SET(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
  SET(CPACK_SYSTEM_NAME "Linux-i686")
  SET(CPACK_TOPLEVEL_TAG "Linux-i686")
  SET(CPACK_STRIP_FILES "${EXE_NAME}")
ENDIF()
# common
SET(CPACK_SOURCE_STRIP_FILES TRUE )
SET(CPACK_PACKAGE_EXECUTABLES "${EXE_NAME}" "${EXE_NAME}")
SET(CPACK_CREATE_DESKTOP_LINKS "${EXE_NAME}" ) 
SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}_${PROJECT_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
SET(CPACK_PACKAGE_VENDOR "${PROJECT_VENDOR}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CaPTk is a collection of algorithms from CBICA")
SET(CPACK_SOURCE_IGNORE_FILES "\\\\.svn/;^${PROJECT_SOURCE_DIR}/doc/")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "captk-${SW_VER}-source" CACHE INTERNAL "tarball basename")
#SET(CPACK_RESOURCE_FILE_README "${README_FILE}")
#SET(CPACK_RESOURCE_FILE_LICENSE "${LICENSE_FILE}") 
SET(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Developer Full)
SET(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Developer Full)
SET(CPACK_COMPONENT_APPLICATIONS_INSTALL_TYPES Full)
SET(CPACK_ALL_INSTALL_TYPES Full Developer)
set(CPACK_SOURCE_IGNORE_FILES "${CMAKE_SOURCE_DIR}/bin/;{CMAKE_SOURCE_DIR}/build/;${CMAKE_SOURCE_DIR}/.svn/")

INCLUDE(InstallRequiredSystemLibraries)
INCLUDE(CPack)
