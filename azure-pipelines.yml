# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master

jobs:

- job: 'XenialBuild'
  displayName: "End-to-end Xenial build"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
    # - bash: |
    #     echo "Build.DefinitionName=" $(Build.DefinitionName)
    #     echo "Build.Repository.Name=" $(Build.Repository.Name)
    #     echo "System.TeamProject=" $(System.TeamProject)
    #     echo "System.CollectionId=" $(System.CollectionId)
    #   displayName: 'Test Names'

  # Checkout validator.
  # - bash: |
  #     set -x
  #     if [ -n "$(System.PullRequest.SourceCommitId)" ]; then
  #       git checkout $(System.PullRequest.SourceCommitId)
  #     fi
  #   displayName: 'Checkout pull request HEAD'

    # Pull LFS
    - bash: |
        git lfs pull
      displayName: 'Pull LFS'

  #   # Dependency manager
  #   - bash: |
  #       sudo apt-get install -qq gcc g++ make libgl-dev cmake python3-pip python-numpy dos2unix libxkbcommon-x11-0 doxygen
  #     displayName: 'Install dependencies from Aptitude'

  # # Debug info before main scripts start
  # # - bash: |
  # #     ls -al
  # #   displayName: 'Get debugging information'

  #   # Create build dir
  #   - bash: |
  #       mkdir -p bin
  #     displayName: 'Create build directory'

  # # This is here in case if either Qt or External apps needs to be overridden
  # # - bash: |
  # #       mv ./binaries/qt5.12.1_linux.zip ./bin/qt.zip
  # #       mv ./binaries/externalApps.zip ./bin/
  # #       cd bin
  # #       unzip externalApps.zip &> /dev/null
  # #   displayName: 'Install Qt & external applications'

  #   # Set up Qt from Binaries
  #   - bash: |
  #       mv ./binaries/qt5.12.1_linux.zip ./bin/qt.zip
  #       echo "Moved qt binaries"
  #     displayName: 'Set up Qt on Linux'

  #   # Create as much free memory as possible

  #   # Nuclear Option #1
  #   - bash: |
  #       rm -rf binaries/_*.zip
  #       # rm -rf data
  #       rm -rf history
  #       rm -rf src/applications/individualApps/libra/MCRInstaller.zip
  #     displayName: 'Take the nuclear option'

  #   # Create fake test dirs. Can be removed.
  #   # - bash: |   
  #   #     cd bin
  #   #     mkdir -p testing
  #   #     mkdir -p ./testing/TestData
  #   #   displayName: 'Create phony tests'

  #   # Configure and build superbuild
  #   - bash: |
  #       cd bin
  #       cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
  #       make -j2
  #     displayName: 'Configure and compile Superbuild'

  #   # Configure and build CaPTk
  #   - bash: |
  #       cd bin
  #       cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
  #       make -j2
  #     displayName: 'Configure and compile CaPTk'

  #   # Check qt
  #   - bash: |
  #       cd bin
  #       ls -a
  #       ls ./qt/
  #     displayName: 'Check qt'
      
  #   # Build a package
  #   - bash: |
  #       export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH
  #       export PATH=`pwd`/bin/qt/5.12.1/libexec:$PATH
  #       export CMAKE_PREFIX_PATH=`pwd`/bin/qt/5.12.1/lib/cmake/Qt5:$CMAKE_PREFIX_PATH
  #       export PKG_FAST_MODE=1
  #       ./scripts/captk-pkg

  #       rm -rf bin
  #       rm -rf src
  #       rm -rf binaries
  #       rm -rf data
  #       rm -rf docs*
  #       rm -rf regression
  #       rm -rf scripts
  #       rm -rf testing
        
  #     displayName: 'Set up environment variables for packager and build a package'
    
  #   - task: CopyFiles@2
  #     inputs:
  #       sourceFolder: '$(Build.SourcesDirectory)'
  #       targetFolder: '$(Build.ArtifactStagingDirectory)'
  #       cleanTargetFolder: true
  #       overWrite: true
  #       contents: 'CaPTk_*_Installer.bin'
    
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       pathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #       artifactName: '$(Build.DefinitionName)_installer_Linux'

  #   - task: DownloadBuildArtifacts@0
  #     inputs:
  #       buildType: 'current'
  #       downloadType: 'single'
  #       artifactName: '$(Build.DefinitionName)_installer_Linux'
  #       downloadPath: '$(System.ArtifactsDirectory)'

- job: 'WindowsBuild'
  displayName: "End-to-end Windows build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'vs2017-win2016'

  steps:
  
    # - script: |
    #     choco install doxygen.install
    #   displayName: 'Install dependencies'
  
    # - bash: |
    #     rm -rf history
    #     rm -rf src/applications/individualApps/libra/MCRInstaller.zip
    #   displayName: 'Take the nuclear option'

    # - script: |
    #     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #     cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="install" .
    #     setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
    #     cmake --build . --target ALL_BUILD --config Release
    #   displayName: 'Configure and compile Superbuild'
    
    # - script: |
    #     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #     cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="install" .
    #     setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
    #     cmake --build . --target ALL_BUILD --config Release
    #   displayName: 'Configure and compile CaPTk'
    
    # - script: |
    #     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #     cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="install" .
    #     cmake --build . --target PACKAGE --config Release
    #   displayName: 'Package CaPTk'
    
    - powershell: |    
        ls
        Get-Location
        # Move-Item -Path bin\CaPTk_*_Installer.exe -Destination .\CaPTk_*_Installer.exe
        # Remove-Item-Force -Recurse -Path bin 
        # Remove-Item-Force -Recurse -Path bin
        # Remove-Item-Force -Recurse -Path src
        # Remove-Item-Force -Recurse -Path binaries
        # Remove-Item-Force -Recurse -Path data
        # Remove-Item-Force -Recurse -Path docs*
        # Remove-Item-Force -Recurse -Path regression
        # Remove-Item-Force -Recurse -Path scripts
        # Remove-Item-Force -Recurse -Path testing
        
      displayName: 'Moving Installer one level up'

    # - task: CopyFiles@2
    #   inputs:
    #     sourceFolder: '$(Build.SourcesDirectory)'
    #     targetFolder: '$(Build.ArtifactStagingDirectory)'
    #     cleanTargetFolder: true
    #     overWrite: true
    #     contents: 'CaPTk_*_Installer.exe'
    
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     artifactName: '$(Build.DefinitionName)_installer_windows'

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #     buildType: 'current'
    #     downloadType: 'single'
    #     artifactName: '$(Build.DefinitionName)_installer_macOS'
    #     downloadPath: '$(System.ArtifactsDirectory)'
    
- job: 'MacOSBuild'
  displayName: "End-to-end MacOS build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'MacOS-10.13'

  steps:
    - bash: |
        brew install caskroom/cask/mactex make git-lfs doxygen llvm
      displayName: 'Brew dependencies'
    
    # - bash: |
    #     rm -rf history
    #     rm -rf src/applications/individualApps/libra/MCRInstaller.zip
    #   displayName: 'Take the nuclear option'

    # - bash: |
    #     export CC=""
    #     export CXX=""
    #     export LDFLAGS=""
    #     export CPPFLAGS=""

    #     git lfs install && git lfs fetch --all

    #     export CMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
    #     export CMAKE_PREFIX_PATH="/Library/TeX/texbin"
    #   displayName: 'Export variables'

    # - bash: |
    #     mkdir bin
    #   displayName: 'Create build directory'
    
    # - bash: |
    #     cd bin

    #     cmake ../ -DCMAKE_INSTALL_PREFIX="./install"
    #     cmake ../ -DCMAKE_INSTALL_PREFIX="./install"

    #     make -j2
    #   displayName: 'Configure and compile Superbuild'

    # - bash: |
    #     cd bin

    #     rm CMakeCache.txt

    #     export CC=/usr/local/opt/llvm/bin/clang
    #     export CXX=/usr/local/opt/llvm/bin/clang++
    #     export LDFLAGS="-L/usr/local/opt/llvm/lib"
    #     export CPPFLAGS="-L/usr/local/opt/llvm/include"

    #     cmake ../
    #     cmake ../

    #     make -j2
    #   displayName: 'Export variables for llvm then configure and compile CaPTk'
    
    # - bash: |
    #     cd bin 
        
    #     make package

    #     version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
    #     pkgname="_Installer"
    #     pkgname="$version$pkgname"

    #     pkgbuild --version $version --identifier com.cbica.captk --install-location /Applications --component ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/  ./CaPTk_$version.pkg

    #     productbuild --synthesize --package CaPTk_$version.pkg ./distribution.xml

    #     xml='<?xml version="1.0" encoding="utf-8"?>
    #     <installer-gui-script minSpecVersion="1">
    #         <title>CaPTk_'"$version"'</title>
    #         <license file="Combined.txt"></license>
    #         <pkg-ref id="com.cbica.captk"/>
    #         <options customize="never" require-scripts="false"/>
    #         <choices-outline>
    #             <line choice="default">
    #                 <line choice="com.cbica.captk"/>
    #             </line>
    #         </choices-outline>
    #         <choice id="default"/>
    #         <choice id="com.cbica.captk" visible="false">
    #             <pkg-ref id="com.cbica.captk"/>
    #         </choice>
    #         <pkg-ref id="com.cbica.captk" version="$version" onConclusion="none">CaPTk_'"$version"'.pkg</pkg-ref>
    #     </installer-gui-script>' 

    #     echo $xml > "./distribution.xml"

    #     productbuild --distribution ./distribution.xml --resources ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/Contents/Resources/license/ --package-path . ./CaPTk_$pkgname.pkg
        
    #     mv *Installer.pkg ../
    #     rm -rf *
    #   displayName: 'Package CaPTk (.dmg and .pkg)'

    # - task: CopyFiles@2
    #   inputs:
    #     sourceFolder: '$(Build.SourcesDirectory)'
    #     targetFolder: '$(Build.ArtifactStagingDirectory)'
    #     cleanTargetFolder: true
    #     overWrite: true
    #     contents: 'CaPTk_*_Installer.pkg'
    
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     artifactName: '$(Build.DefinitionName)_installer_macOS'

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #     buildType: 'current'
    #     downloadType: 'single'
    #     artifactName: '$(Build.DefinitionName)_installer_macOS'
    #     downloadPath: '$(System.ArtifactsDirectory)'
    
    
