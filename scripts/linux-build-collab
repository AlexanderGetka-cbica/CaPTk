#!/bin/bash

# This build script is a copy of captk-pkg with stripped back features.
# For relevant documentation/requirements please refer to that file.
# The intention of this script is to provide a very simple configuration/compilation
# without the long packaging step of captk-pkg for testing purposes


# Set -e causes any subsequent commands which fail will cause the shell script to exit immediately.
# This is here because typically, bash just plows through errors, and that's an awful thing.
# When interacting with users, or helping them with this script, they may not know what error is important.
# With this, they'll see the first error and the script will terminate.
set -e

# Store the root dir this is being run from
SRC_DIR=`pwd`

# Run the fixes for linux
FIX_CMD () {
  # Save the install dir for later
  INSTALL_DIR=`pwd`

  echo "[:] Running Linux Fixes..."

  # Fix 1: LIBRA is awful on linux, and it only gets worse from here
  # 
  # For some reason LIBRA won't get added to the bin or libexec folders
  # So just manually do it
  # In addition LIBRA needs the Matlab runtime with one VERY SPECIFIC file
  # to be marked as executable or else the whole thing WILL NOT work. We'll get to this in a second
  echo "[:] Adding LIBRA..."
  cd ${SRC_DIR}
  cp ./src/applications/individualApps/libra/bin/libra ./bin/install/appdir/usr/bin/
  cp ./src/applications/individualApps/libra/libexec/libra ./bin/install/appdir/usr/libexec/
  # cp -r ./src/applications/individualApps/libra/MCR ./bin/install/appdir/usr/libexec/\

  # Move into install
  cd ./bin/install/appdir/usr

  # Fix 2: WebEngine stuff
  #
  # From what I understand, linuxdeployqt will pull in all the required packages, binaries and link them dynamically
  # so that it can wrap that in an AppImage so those links are preserved at runtime.
  #
  # However, the WebEngine requires libraries that chromium uses (Since it's literally just a chromium instance)
  # but for SOME reason linuxdeployqt doesn't pull in. So we need to manually add these nss libraries in for the webengine
  # to work.
  echo "[:] Adding NSS libs..."
  cp /usr/lib/x86_64-linux-gnu/nss/* ./lib

  # Fix 3: LIBRA was made on windows and none of the stuff is marked as executable by default
  # All of these need to be exec or else it flat out doesnt work.
  # Needs to be marked as executable for LIBRA

  # echo "[:] Marking MATLAB binaries as executable..."

  # The magic file that we need from earlier
  # cd ./libexec/MCR/v84/bin/glnxa64
  # chmod +x matlab_helper

  # Go back up to /bin
  cd ${INSTALL_DIR}/bin
  
  # Fix 4: DOS sucks and that file format literally cannot be run on linux so an external tool is needed
  # to mark them as usable

  echo "[:] Running dos2unix..."

  # Libra needs it
  dos2unix libra
  chmod +x libra
  # So does confetti
  dos2unix ConfettiGUI.py
  chmod +x ConfettiGUI.py
  # And also the files in libexec
  cd ../libexec
  dos2unix ConfettiCore.py
  chmod +x ConfettiCore.py
  chmod +x libra

  # Go back up to install
  cd ${INSTALL_DIR}
}

usage () {
  echo "CaPTk Packager for Linux"
  echo ""
  echo "  usage: ${0} --itk=/path/to/ITK-build"
  echo ""
  echo "  ${0} is an automated linux packager for CaPTk. Make sure to run it from the project root, and"
  echo "  pass in the location to your built ITK directory if it isn't in your path"
  exit 0
}

echo "[!] Warn: This script has not been updated for the superbuild option. If you are building with the superbuild enabled, note that this script may not work as intended"

# Check commandline arguments for ITK-PATH
ITK_PATH=""
case $1 in
  --itk=*)
  ITK_PATH="${1#*=}"
  if [[ -d "${ITK_PATH}" ]] ; then
    echo "[*] Got ITK Path: ${ITK_PATH}"
  else
    echo "[!] Error: No ITK Path found."
    usage
  fi
  ;;
  -h|--help)
  usage
  ;;
  *)
  echo "[!] Warn: You did not supply an ITK path, and it is assumed it is in your PATH variable. see ${0} -h for more"
esac

echo "[:] Starting CaPTk packaging process..."

echo "[?] Checking if you are in trunk..."
# Test to see if the user is in trunk
# First see if CMakeLists.txt exists
if [[ -e CMakeLists.txt ]] ; then
  # See if it contains PROJECT( CaPTk )
  if [[ -z  `cat CMakeLists.txt | grep "PROJECT( CaPTk )"`  ]] ; then
    echo "[!] Error: You do not appear to be within trunk of CaPTk (Project is not CaPTk)"
    exit -1
  fi
else
  echo "[!] Error: You do not appear to be in trunk (CMakeLists.txt not found)"
  exit -1
fi

# Create binary directory
echo "[:] Creating binary directory..."
mkdir -p bin
cd bin

# Expose ITK_PATH if given one
echo "[:] Making ITK visible to cmake..."
if [[ -z "${ITK_PATH}" ]] ; then
  echo "[!] Assuming it is in your PATH"
else
  export PATH=${ITK_PATH}:$PATH
fi

# Cmake
echo "[:] Running cmake command..."
bash ../scripts/linux-cmake-conf

# Make install/strip
echo "[:] Building CaPTk..."
make -j2 install/strip

# Install docs
echo "[:] Installing docs..."
cp -r docs install/appdir/usr/

# Fix
cd install
APP_DIR=`pwd`
cd ./appdir/usr/
# We need to fix the project first
FIX_CMD
cd ${APP_DIR}

echo "[:] Done. Project has been built"
