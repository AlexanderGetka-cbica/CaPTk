	/**

\page Technical_Reference Technical Reference

This section gives further technical details for all previous documentation material.

- \subpage tr_Apps "Further Application Details and Assumptions"
- \subpage tr_buildFromSource "Build CaPTk from Source"
- \subpage tr_forDeves "For Developers"
*/

/**

\page tr_Apps Further Application Details and Assumptions

Contents
- <a href="#appsVisualization"><u>Image Visualization</u></a><br>
- <a href="#appsFeatures"><u>Extracted Features</u></a><br>

--------



### <a name="appsVisualization">Image Visualization</a>
The visualization of images is based on the physical coordinate system of each image (i.e., the origin and direction information from within the image file is used for rendering). In practice, use of a consistent coordinate framework results in images with different origins to appear misaligned (shifted) when compared to other neuro-imaging software packages that do rendering based on the Cartesian coordinate information in the image.
<br>
<br>
CaPTk has been optimized for monitors with 16:9 resolution, especially 1920x1080 at 100% scaling. More resolutions and scaling options are being actively tested and support will increase in subsequent releases.

--------



### <a name="appsFeatures">Extracted Features</a>
<table border="1">
    <tr>
      <td align="center"><b>Feature Family</b></td>
      <td align="center"><b>Specific <br> Features</b></td>
      <td align="center"><b>Parameter<br>Name</b></td>
      <td align="center"><b>Range</b></td>
      <td align="center"><b>Default</b></td>
      <td align="center"><b>Description, Formula and Comments</b></td>
    </tr>
    <tr>
      <td align="center">Intensity Features<br>(First-Order Statistics)</td>
      <td>
        <ul>
          <li>Minimum
          <li>Maximum
          <li>Mean
          <li>Standard Deviation
          <li>Variance
          <li>Skewness
          <li>Kurtosis
        </ul>
      <td>N.A.
      <td>N.A.
      <td>N.A.
      <td>
        <ul>
          <li>Minimum Intensity = \f$ Min (I_{k}). \f$ where \f$ I_{k} \f$ is the intensity of pixel or voxel at index k.
          <li>Maximum Intensity = \f$ Max (I_{k}). \f$ where \f$ I_{k} \f$ is the intensity of pixel or voxel at index k.
          <li>Mean=\f$ \frac{\sum(X_{i})}{N} \f$ where N is the number of voxels/pixels.
          <li>Standard Deviation =\f$ \sqrt{\frac{\sum(X-\mu)^{2}}{N}}\f$ where \f$\mu\f$ is the mean of the data.
          <li>Variance =\f$ \frac{\sum(X-\mu)^{2}}{N} \f$ where \f$\mu\f$ is the mean intensity.
          <li>Skewness =\f$ \frac{\sum_{i=1}^{N}(X_{i} - \bar{X})^{3}/N} {s^{3}} \f$ where \f$\bar{X}\f$ is the mean, s is the standard deviation and N is the number of pixels/voxels.
          <li>Kurtosis =\f$ \frac{\sum_{i=1}^{N}(X_{i} - \bar{X})^{4}/N}{s^{4}} \f$ where \f$\bar{X}\f$ is the mean, s is the standard deviation and N is the number of pixels/voxels.
        </ul>  
        All features in this family are extracted from the raw intensities.
      </td>
    </tr>
    <tr>
      <td align="center">Histogram<br>-based
      <td>
        <ul>
          <li>Bin Frequency
        </ul>
      <td>Num_Bins
      <td>N.A.
      <td>10
      <td>
        <ul>
          <li>Uses number of bins as input and the number of pixels in each bin would be the output.
        </ul>
        All features in this family are extracted from the discretized intensities.
    </tr>
    <tr>
      <td align="center">Volumetric
      <td><ul><li>Volume/Area</ul>
      <td>Dimensions <br>Axis
      <td>2D:3D <br>x,y,z
      <td>3D <br>z
      <td><ul><li>Volume/Area (depending on image dimension) and number of voxels/pixels in the ROI. </ul>
    </tr>
    <tr>
      <td align="center">Morphologic
      <td>
       <ul>
          <li>Elongation
          <li>Perimeter       
          <li>Roundness 
          <li>Eccentricity
       </ul>
      <td>Dimensions <br>Axis
      <td>2D:3D <br>x,y,z
      <td>3D <br>z
      <td>
        <ul>
          <li>Elongation =\f$ \sqrt{\frac{i_{2}}{i_{1}}} \f$ where i_{n} are the second moments of particle around its principal axes.
          <li>Perimeter = \f$ 2 \pi r \f$ where r is the radius of the circle enclosing the shape.
          <li>Roundness = \f$ As/Ac = (Area of a shape)/(Area of circle) \f$ where circle has the same perimeter.
          <li>Eccentricity =\f$ \sqrt{1 - \frac{a*b}{c^{2}}} \f$  where c is the longest semi-principal axis of an ellipsoid fitted on an ROI, and a and b are the 2nd and 3rd longest semi-principal axes of the ellipsoid.
        </ul>
    </tr>
    <tr>
      <td align="center">Local Binary<br>Pattern (LBP)
      <td>
      <td>Radius <br>Neighborhood
      <td>N.A. <br>2:4:8
      <td>N.A. <br>8
      <td>
        <ul>
          <li>The LBP codes are computed using N sampling points on a  circle of radius R and using mapping table.
        </ul>
    </tr>
    <tr>
      <td align="center">Grey Level<br>Co-occurrence<br>Matrix<br> (GLCM)
      <td>
        <ul>
          <li>Energy (Angular Second Moment)
          <li>Contrast (Inertia)
          <li>Joint Entropy
          <li>Homogeneity (Inverse Difference Moment)
          <li>Correlation
          <li>Variance
          <li>SumAverage
          <li>Variance
          <li>Auto<br>Correlation          
        </ul>
      <td>Num_Bins <br><br>Num_Directions <br><br>Radius <br><br>Dimensions <br><br>Offset <br><br>Axis
      <td>N.A. <br><br>3:13 <br><br>N.A. <br><br>2D:3D <br><br>Individual/Average/Combined<br><br>x,y,z
      <td>10 <br><br>13 <br><br>2 <br><br>3D  <br><br>Average <br><br>z
      <td> 
        For a given image, a Grey Level Co-occurrence Matrix is created and \f$ g(i,j) \f$ represents an element in matrix
        <ul>
          <li>Energy = \f$  \sum_{i,j}g(i, j)^2 \f$
          <li>Contrast = \f$ \sum_{i,j}(i - j)^2g(i, j) \f$
          <li>Joint Entropy = \f$ -\sum_{i,j}g(i, j) \log_2 g(i, j) \f$
          <li>Homogeneity =\f$ \sum_{i,j}\frac{1}{1 + (i - j)^2}g(i, j) \f$
          <li>Correlation =\f$ \sum_{i,j}\frac{(i - \mu)(j - \mu)g(i, j)}{\sigma^2} \f$
          <li>Sum Average =\f$ \sum_{i,j}i \cdot g(i, j) = \sum_{i,j}j \cdot g(i, j)\f$(due to matrix symmetry) 
          <li>Variance = \f$ \sum_{i,j}(i - \mu)^2 \cdot g(i, j) = \sum_{i,j}(j - \mu)^2 \cdot g(i, j)\f$ (due to matrix symmetry)
          <li>AutoCorrelation = \f$\frac{\sum_{i,j}(i, j) g(i, j)-\mu_t^2}{\sigma_t^2}\f$ where \f$\mu_t\f$ and \f$\sigma_t\f$ are the mean and standard deviation of the row (or column, due to symmetry) sums.
        </ul>
        All features are estimated within the ROI in an image, considering 26-connected neighboring voxels in the 3D volume. 
        <b>Note</b> that the creation of the GLCM and its corresponding aforementioned features for all offsets are calculated using an existing ITK filter. The <b>Individual</b> option gives features for each individual offset, <b>Average</b> estimates the average across all offsets and assigns a single value for each feature and <b>Combined</b> combines the GLCM matrices generated across offsets and calculates a single set of features from this matrix.
    </tr>
    <tr>
      <td align="center">Grey Level<br>Run-Length<br>Matrix<br> (GLRLM)
      <td>
        <ul>
          <li>SRE
          <li>LRE
          <li>GLN
          <li>RLN
          <li>LGRE
          <li>HGRE
          <li>SRLGE
          <li>SRHGE
          <li>LRLGE
          <li>LRHGE    
        </ul>
      <td>Num_Bins <br><br>Num_Directions <br><br>Radius <br><br>Dimensions <br><br>Axis <br><br>Offset <br><br>Distance_Range
      <td>N.A. <br><br>3:13 <br><br><br>N.A. <br><br>2D:3D <br><br>x,y,z <br><br>Individual/Average/Combined<br><br>1:5
      <td>10 <br><br>13 <br><br><br>2 <br><br>3D <br><br>z  <br><br>Average <br><br>1
      <td>
        For a given image, a run-length matrix \f$ P(i; j)\f$  is defined as the number of runs with pixels of gray level i and run length j.
        <ul>
          <li>Short Run Emphasis (SRE) = \f$ \frac{1}{n_r}\sum_{i,j}^{N}\frac{p(i,j)}{j^2} \f$
          <li>Long Run Emphasis (LRE) =\f$ \frac{1}{n_r}\sum_{j}^{N}p(i,j) \cdot j^2\f$
          <li>Grey Level Non-uniformity (GLN) =\f$ \frac{1}{n_r}\sum_{i}^{M}\Big(\sum_{j}^{N}p(i,j) \Big)^2 \f$
          <li>Run Length Non-uniformity (RLN) =\f$ \frac{1}{n_r}\sum_{j}^{N}\Big(\sum_{i}^{M}p(i,j) \Big)^2 \f$       
          <li>Low Grey-Level Run Emphasis (LGRE)=\f$ \frac{1}{n_r}\sum_{i}^{M}\frac{p_g(i)}{i^2} \f$
          <li>High Grey-Level Run Emphasis (HGRE)=\f$ \frac{1}{n_r}\sum_{i}^{M}p_g(i) \cdot i^2 \f$
          <li>Short Run Low Grey-Level Emphasis (SRLGE)= \f$\frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j)}{i^2 \cdot j^2} \f$ 
          <li>Short Run High Grey-Level Emphasis (SRLGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j) \cdot i^2 }{j^2}\f$ 
          <li>Long Run Low Grey-Level Emphasis (LRLGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j) \cdot j^2 }{i^2} \f$ 
          <li>Long Run High Grey-Level Emphasis (LRHGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}p(i,j) \cdot i^2 \cdot j^2 \f$ 
        </ul>
        All features are estimated within the ROI in an image, considering 26-connected neighboring voxels in the 3D volume. 
        <b>Note</b> that the creation of the GLRLM and its corresponding aforementioned features for all offsets are calculated using an existing ITK filter. The <b>Individual</b> option gives features for each individual offset, <b>Average</b> estimates the average across all offsets and assigns a single value for each feature and <b>Combined</b> combines the GLRLM matrices generated across offsets and calculates a single set of features from this matrix.
    </tr>
    <tr>
      <td align="center">Neighborhood<br>Grey-Tone<br>Difference<br>Matrix<br> (NGTDM)
      <td>
        <ul>
          <li>Coarseness
          <li>Contrast
          <li>Busyness
          <li>Complexity
          <li>Strength
        </ul>
      <td>Num_Bins <br><br>Num_Directions <br><br>Dimensions <br><br>Axis <br><br>Distance_Range
      <td>N.A. <br><br>3:13 <br> <br><br>2D:3D <br><br>x,y,z <br><br>1:5
      <td>10 <br><br>13 <br><br><br>3D <br><br>N.A. <br><br>1
      <td> 
        <ul>
          <li>Coarseness =\f$ \Big[ \epsilon + \sum_{i=0}^{G_{k}} p_{i}s(i) \Big]\f$
          <li>Contrast =\f$ \Big[\frac{1}{N_{s}(N_{s}-1)}\sum_{i}^{G_{k}}\sum_{j}^{G_{k}}p_{i}p_{j}(i-j)^2\Big]\Big[\frac{1}{n^2}\sum_{i}^{G_{k}}s(i)\Big] \f$
          <li>Busyness =\f$ \Big[\sum_{i}^{G_{k}}p_{i}s(i)\Big]\Big/ \Big[\sum_{i}^{G_{k}}\sum_{j}^{G_{k}}i p_{i} - j p_{j}\Big] \f$
          <li>Complexity =\f$ \sum_{i}^{G_{k}}\sum_{j}^{G_{k}} \Big[ \frac{(|i-j|)}{(n^{2}(p_{i}+p_{j}))} \Big] \Big[ p_{i}s(i)+p_{j}s(j) \Big]\f$
          <li>Strength =\f$ \Big[\sum_{i}^{G_{k}}\sum_{j}^{G_{k}}(p_{i}+p_{j})(i-j)^{2}\Big]/\Big[\epsilon + \sum_{i}^{G_{k}} s(i)\Big]\f$
        </ul>
          Where \f$p_{i}\f$ is the probability of occurrence of a voxel of intensity i and \f$s(i)\f$ represents the NGTDM value of intensity i calculated as: 
          \f$ \sum │i - Ai│\f$. Ai indicates the average intensity of the surrounding voxels without including the central voxel.         
    </tr>
    <tr>
      <td align="center">Grey Level<br>Size-Zone<br>Matrix<br> (GLSZM)
      <td>
        <ul>
          <li>SZE
          <li>LZE
          <li>GLN
          <li>ZSN
          <li>ZP
          <li>LGZE
          <li>HGZE
          <li>SZLGE
          <li>SZHGE
          <li>LZLGE
          <li>LZHGE
          <li>GLV
          <li>ZLV      
        </ul>
      <td>Num_Bins <br><br>Num_Directions <br><br>Radius <br><br>Dimensions <br><br>Axis <br><br>Distance_Range
      <td>N.A. <br><br>3:13 <br><br><br>N.A. <br><br>2D:3D <br><br>x,y,z <br><br>1:5
      <td>10 <br><br>13 <br><br><br>2 <br><br>3D <br><br>z <br><br>4
      <td>
        For a given image, a run-length matrix \f$ P(i; j)\f$  is defined as the number of runs with pixels of gray level i and run length j.
        <ul>
          <li>Small Zone Emphasis (SZE) = \f$ \frac{1}{n_r}\sum_{i,j}^{N}\frac{p(i,j)}{j^2} \f$
          <li>Large Zone Emphasis(LZE) =\f$ \frac{1}{n_r}\sum_{j}^{N}p(i,j) \cdot j^2\f$
          <li>Gray-Level Non-uniformity (GLN) =\f$ \frac{1}{n_r}\sum_{i}^{M}\Big(\sum_{j}^{N}p(i,j) \Big)^2 \f$
          <li>Zone-Size Non-uniformity (ZSN) =\f$ \frac{1}{n_r}\sum_{j}^{N}\Big(\sum_{i}^{M}p(i,j) \Big)^2 \f$       
          <li>Zone Percentage (ZP) =\f$ \frac{n_{r}}{n_p} \f$ where \f$ n_r \f$ is the total number of runs and \f$ n_p \f$ is the number of pixels in the image. 
          <li>Low Grey-Level Zone Emphasis (LGZE)=\f$ \frac{1}{n_r}\sum_{i}^{M}\frac{p_g(i)}{i^2} \f$
          <li>High Grey-Level Zone Emphasis (HGZE)=\f$ \frac{1}{n_r}\sum_{i}^{M}p_g(i) \cdot i^2 \f$
          <li>Short Zone Low Grey-Level Emphasis (SZLGE)= \f$\frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j)}{i^2 \cdot j^2} \f$ 
          <li>Short Zone High Grey-Level Emphasis (SZLGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j) \cdot i^2 }{j^2}\f$ 
          <li>Long Zone Low Grey-Level Emphasis (LZLGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}\frac{p(i,j) \cdot j^2 }{i^2} \f$ 
          <li>Long Zone High Grey-Level Emphasis (LZHGE) =\f$ \frac{1}{n_r}\sum_{i}^{M}\sum_{j}^{N}p(i,j) \cdot i^2 \cdot j^2 \f$ 
        </ul> 
        All features are estimated within the ROI in an image, considering 26-connected neighboring voxels in the 3D volume.
    </tr>
</table>
\latexonly
The complete list of features, their parameterization options and mathematical descriptions can be found in <code>share/doc/feaUsage.html</code> or in our web page (http://captk.projects.nitrc.org/feaUsage.html).
\endlatexonly

The parameterization of the <b>lattice-based strategy</b> for feature extraction is defined by:
- The grid spacing representing the distance between consecutive lattice points (Default: 6.3mm). 
- The size of the local region centered at each lattice point (Default: 6.3mm).

*/


/**
\page tr_buildFromSource Build CaPTk from Source
Source code for the CaPTk graphical interface and applications is distributed for sites that wish to examine the code, collaborate with CBICA in future development, and for compatibility.

Contents
- <a href="#prerequisites"><u>Pre-requisites</u></a><br>
- <a href="#actualBuild"><u>Build</u></a><br>
- <a href="#cMakeForBuildTree"><u>Build Tree Configuration through CMake</u></a><br>
- <a href="#actualCompile"><u>Compile the project</u></a><br>
- <a href="#optionalBuilds"><u>Optional</u></a><br>
- <a href="#linuxBuild"><u>Linux Build Guide</u></a><br>

--------

### <a name="prerequisites">PRE-REQUISITES</a>
Before building CaPTk, the following software libraries are required to be installed. <strong>Please note</strong> that to build in Windows, CMake needs to be used an appropriate compiler (Win64 version of Visual Studio is recommended). The selected solution platform is needed to match with dependent libraries.

<table border="0">
    <tr>
      <td width="7%"><strong>Package</strong></td>      
      <td width="7%"><strong>Version</strong></td>      
      <td width="100%"><strong>Description</strong></td>  
    </tr>
    <tr>
      <td>Archiver</td>
      <td>n/a</td>
      <td>gzip (http://www.gzip.org/) is recommended. <br><b>Windows Users</b>: 7-zip (http://www.7-zip.org/)</td>
    </tr>
    <tr>
      <td>C++ compiler</td>
      <td>n/a</td>
      <td>Visual Studio 2017, GCC/4.9.2, LLVM 6.0.1 are supported; C++11 compliant compiler is needed</td>
    </tr>
    <tr>
      <td>CMake (http://www.cmake.org/)</td>
      <td>3.10 or higher</td>
      <td>To configure the CaPTk compilation along with its dependencies.</td>
    </tr>
    <tr>
      <td>Qt (http://qt-project.org/downloads)</td>
      <td>5.10.x</td>
      <td>The main GUI interface for CaPTk. Download and install the precompiled library.</td>
    </tr>
    <tr>
      <td>VTK (http://www.vtk.org/)</td>
      <td>8.1.0</td>
      <td>Install Qt before setting VTK up. Instructions to compile VTK are given at http://www.vtk.org/Wiki/VTK/Configure_and_Build. During CMake configuration, enable the <b>VTK_USE_QT</b> and <b>VTK_USE_QVTK_QTOPENGL</b> flags. <br><b>GCC Users</b>: For compilation use the command <b>make CXXFLAGS=-std=c++11</b>.</td>
    </tr>
    <tr>
      <td>OpenCV (http://opencv.org/downloads.html)</td>
      <td>3.4 or higher</td>
      <td>All machine learning algorithms. This generally comes pre-compiled; if not found for your system, steps similar to those done for VTK and ITK compilation can be followed. <br><b>GCC Users</b>: For compilation use the command <b>make CXXFLAGS=-std=c++11</b>.</td>
    </tr>
    <tr>
      <td>ITK (http://www.itk.org/)</td>
      <td>4.13 and above</td>
      <td>Build VTK before proceeding to compile ITK. Instructions to compile ITK are given at http://www.itk.org/Wiki/ITK/Configuring_and_Building. During CMake configuration, enable the <b>Module_ITKVtkGlue</b>, <b>Module_ITKVideoBridgeOpenCV</b> and <b>VCL_INCLUDE_CXX_0X</b> flags. <br><b>GCC Users</b>: For compilation use the command <b>make CXXFLAGS=-std=c++11</b>.</td>
    </tr>
    <tr>
        <td>Doxygen (http://www.stack.nl/~dimitri/doxygen/)</td>
        <td>1.8+</td>
        <td>[OPTIONAL] For documentation only.</td>
    </tr>
</table>

Ensure all dependencies are met before proceeding.

--------

### <a name="actualBuild">BUILD</a>
Please follow commands below in a shell/terminal (e.g., Bash (http://www.gnu.org/software/bash/)). They will configure and build CaPTk using GNU Make (http://www.gnu.org/software/make/). The main CMake configuration file (CMakeLists.txt) is located in the root directory of the package. <b>Windows</b> users need to follow the equivalent graphical interface.

Extract source files and create the build directory:
\verbatim
tar xzf CaPTk-${version}-source.tar.gz
mkdir CaPTk-${version}-build
cd CaPTk-${version}-build
\endverbatim
<b>Windows Users</b>: an appropriate compression program (e.g., 7-zip (http://www.7-zip.org/)) might be used to extract the files.

--------

<b> <a name="CMakeForBuildTree">RUN CMAKE TO CONFIGURE THE BUILD TREE</a></b>
\verbatim
cmake ../CaPTk-${version}-source
\endverbatim
Use the CMake variable <b>CMAKE_INSTALL_PREFIX</b> to specify the installation
directory, as in:
\verbatim
cmake -DCMAKE_INSTALL_PREFIX=/opt/software/captk ../CaPTk-${version}-source
\endverbatim

For <b>GCC</b> users, CaPTk needs the <b>C++11</b> flag, so ensure that <b>"-std=c++11"</b> option gets added for <b>CMAKE_CXX_FLAGS</b> during the CMake configuration step. This should get done automatically by the CMakeLists.txt file provided but in case of custom build environments, it might get overwritten with other options.

<b>Windows Users</b>: open CMake-GUI and select <code>CaPTk-${version}-source</code> as the "source" directory and select <code>CaPTk-${version}-build</code> as the "build" directory. Click on "Configure" and select the appropriate C++ compiler. If there weren't any configuration errors, click "Generate".

CMake should be able to find the dependencies if they are specified in the <code>$PATH</code> variable in your environment. If you have custom installation directories, then ensure that they have been added to the <code>$PATH</code> variable or point the variable(s) <b>${Dependency}_DIR</b> to the appropriate build paths where <b>${Dependency}Config.cmake</b> is/are present (for example, in the case of ITK, point <code>ITK_DIR</code> to the directory where <code>ITKConfig.cmake</code> is present) - this should be either the build directory or the installation directory. If you are using a bash shell, it can be done using the following command:

\verbatim
cmake -DITKDIR=${path_to_custom_ITK_build_dir} -DVTK_DIR=${path_to_custom_VTK_build_dir} -DQT_QMAKE_EXECUTABLE=${path_to_custom_qt_installation} CaPTk-${version}-source
\endverbatim

<b>Windows Users</b>: set the variables <code>ITK_DIR</code>, <code>VTK_DIR</code> and <code>QT_QMAKE_EXECUTABLE</code> using the CMake-GUI.

This step will generate compiler-specific project files (for example, Make file for GCC and Visual Studio solution file for MSVC). For a full list of generators, please see the CMake documentation on generators at https://cmake.org/cmake/help/v3.0/manual/cmake-generators.7.html</td>. CMake can be used to set various other configuration options and some of those options are:

<table border="0">
    <tr>
        <td width="200px"><b>BUILD_DOCUMENTATION</b></td>
        <td>Builds the documentation (HTML and PDF) from scratch</td>
    </tr>
    <tr>
        <td><b>BUILD_TESTING</b></td>
        <td>Enables unit testing of the software package</td>
    </tr>
    <tr>
        <td><b>CMAKE_INSTALL_PREFIX</b></td>
        <td>Path where the project will be installed</td>
    </tr>
    <tr>
        <td><b>PACKAGE_PROJECT</b></td>
        <td>Create installer for project (not available for all platforms)</td>
    </tr>
</table>

--------

<b> <a name="actualCompile">COMPILE THE PROJECT</a></b>
\verbatim
make CXXFLAGS=-std=c++11 #this ensures c++11 flag is enabled for this build
\endverbatim

<b>Windows Users</b>: you should launch the generated solution file of Visual Studio (by default, only <code>Release</code> version of the code will be compiled - if this needs to be changed, it can be done so by editing the variable <code>CMAKE_CONFIGURATION_TYPE</code> during the CMake configuration step), and then build solution.

<b> Compiling LIBRA</b>

Open MATLAB runtime and change the directory to <code>CaPTk-${version}-source/src/applications/binaries/libra/Source</code> within the main directory of the LIBRA package and run the following command in MATLAB environment:

\verbatim
libra_compile('CaPTk-${version}-source/src/applications/binaries/libra/') # In Unix
\endverbatim

<b>Windows Users</b>: Use following command:

\verbatim
libra_compile('CaPTk-${version}-source\src\applications\binaries\libra\') # In Unix
\endverbatim

<b> [REQUIRED] Install </b>
\verbatim
make install
\endverbatim

<b>Windows Users</b>: you should build the <b>INSTALL</b> project.

Upon the success of the above compilation and build process, CaPTk is installed into the directory specified by the <code>CMAKE_INSTALL_PREFIX</code>, which was set during step 3.2 above.

--------

### <a name="optionalBuilds">[OPTIONAL]</a>

<ul><li><b>Compile the documentation</b></li></ul>
To build the documentation from scratch, the <code>BUILD_DOCUMENTATION</code> option in the CMake configuration needs to be enabled.

\verbatim
make doc
\endverbatim

<b>Windows Users</b>: the documentation is built automatically if <code>BUILD_DOCUMENTATION</code> is enabled. 

<ul><li><b>Test the Compilation</b></li></ul>
To perform tests, the <code>BUILD_TESTING</code> option in the CMake configuration needs to be enabled.

\verbatim
make test
\endverbatim

<b>Windows Users</b>: you should build the <b>RUN_TESTS</b> project.

In case of failing tests, re-run the tests, but this time by executing CTest (http://www.cmake.org/cmake/help/v2.8.8/ctest.html) directly with the '-V' option to enable verbose output and redirect the output to a text file, as in the example below (works for both Windows and Linux on the command line or shell):

\verbatim
ctest -V >& CaPTk-test.log
\endverbatim

And send the file <b>CaPTk-test.log</b> as attachment of the issue report to <mailto:software@cbica.upenn.edu>.

<ul><li><b>Strip executables (Linux only)</b></li></ul>
\verbatim
make install/strip
\endverbatim

<b>Note</b> - this is not needed if you plan to package the project.

<ul><li><b>Package Project</b></li></ul>
Enable the <b>PACKAGE_PROJECT</b> flag in the CMake configuration step to package the project.

\verbatim
make package
sudo dpkg -i CaPTk-Linux.deb
\endverbatim

<b>Windows Users</b>: Build the <b>PACKAGE</b> project in Visual Studio; you will need NSIS (http://nsis.sourceforge.net/Main_Page) to package the project as an installer.

--------

### <a name="linuxBuild">Linux Build Guide</a>

<b>Note:</b> Make sure you have Qt 5.10.0 installed and in your PATH. You can download the open source version installer for free from the Qt website.

The Linux installer is an automated build script that takes care of the entirety of going from source code to a packaged binary that can be run anywhere.

Firstly, locate the build script within the scripts folder of the CaPTk root directory. The linux installation script is called `captk-pkg`.

Open up a terminal window in the scripts directory, and mark the script as executable with the following command:

\verbatim
chmod +x ./captk-pkg
\endverbatim

After this, run the script in the terminal from the CaPTk root with the following commands:

The first will navigate you up one directory to the root, and the second will run the script.

\verbatim
cd ../
./scripts/captk-pkg
\endverbatim

The installation script takes care of the whole build and deployment process. You may notice some issues if the ITK-build directory from the dependency manager isn't found or not in the PATH variable. To fix this, simply pass it in to the script via:

\verbatim
./captk-pkg --itk=/path/to/itk
\endverbatim

This will generate an CaPTk.bin file in the root of CaPTk. Feel free to move this file anywhere and run it. You can run this from the commandline as such:

\verbatim
./CaPTk.bin
\endverbatim


--------


*/
/**

\page tr_forDeves For Developers

Contents
- <a href="#generalInfo"><u>General Information</u></a><br>
- <a href="#dependencies"><u>Dependencies</u></a><br>
- <a href="#cppIntegration"><u>Integrating your C++ application into CaPTk</u></a><br>
- <a href="#pyIntegration"><u>Integrating your Python application into CaPTk</u></a><br>

--------

### <a name="generalInfo">General Information</a>
CaPTk is developed and maintained by the Center for Biomedical Image Computing and Analytics (CBICA) at the University of Pennsylvania, and draws upon research from several groups within the Center.

New applications, written in any programming language, can be integrated into CaPTk at different levels. These applications can then run within CaPTk, while having direct access to the full breadth of CaPTk’s interactive capabilities.

<ul>
  <li><b>Source level integration</b>: At this level, the new application source code (C++) is compiled alongside CaPTk, ensuring the most optimized integration. Source-level integration is straight-forward (only requiring additions to relevant CMake files and minor additions to the interactive base) if the new application relies on a subset of CaPTk’s dependencies (i.e., ITK, VTK, OpenCV, Qt). </li>
  <li><b>Executable level integration</b>: This level provides a graphical interface to an existing command-line application (not necessarily developed in C++), allowing users to leverage CaPTk’s functionality (e.g., interaction, feature extraction). Executable-level integration requires only minor additions to CaPTk to create a menu option for the new application. </li>
</ul>

Almost every application of CaPTk has an accompanying command-line executable (with more on the way). Those programs can be called directly, making the CaPTk applications available as components within a larger pipeline or for efficient batch processing of large numbers of images.

--------

We will provide the technical details of the Cancer Imaging Phenomics Toolkit (<b>CaPTk</b>) using which new applications can be integrated into the global framework and also optimize/improve the code. For any questions/details, please feel free to email <a href="mailto:software@cbica.upenn.edu">software@cbica.upenn.edu</a>.

\image html 10_integration_resize.png "Different layers of application integration in CaPTk"
\image latex 10_integration_resize.png "Different layers of application integration in CaPTk"

Applications written in any language can be integrated with CaPTk via calls to stand-alone command line executables, but deeper integration (including data passing via objects in-memory and access to full breadth of interactive capabilities of the CaPTk Console) is only possible with applications written in C++ (https://isocpp.org/). 

- LIBRA, in its current form (MATLAB executable) has the least possible integration with the CaPTk Console; the console can call the executable, which launches its own UI for the user.
- ITK-SNAP is an example of integration where CaPTk Console communicates with the application using the provided API; in this case CaPTk ensures that the loaded images, ROIs, masks, etc. are all passed to ITK-SNAP and the result from the segmentation step there gets passed to the console for visualization after ITK-SNAP is closed.
- SBRT Lung is an example of integration with a stand-alone CLI application. The Console calls the executable in accordance with CLI, passes the loaded images and ROIs, etc. and visualizes the result when the application is done. 
- EGFRvIII Surrogate Index provides the tightest possible integration with the CaPTk Console. All data (loaded images, ROIs, etc.) is passed in-memory and the visualization of results happens instantaneously.
- All functions available in native C++ libraries (ITK (https://itk.org/), OpenCV (http://opencv.org/), VTK (http://www.vtk.org/)) are available for native applications to use.

--------

### <a name="dependencies">Dependencies</a>
<ol type="1">

  <li>The <b>Graphical Layer</b> is currently written on a Qt4 (https://download.qt.io/archive/qt/4.8/) based framework on C++ for speed, stability and extensibility. Qt, thus, becomes the first dependency for compiling CaPTk. Qt was chosen because it is a well-known tool for developing GUI applications both in academia and also in industry. </li>  
  <li>The basic file input/output operations are based on standard ITK (http://www.itk.org/) I/O (http://www.itk.org/Doxygen/html/group__IOFilters.html), thereby making it the second dependency. ITK was chosen on account of it being an industry and academic standard for developing medical image applications. It also has one of the most vibrant developer and user communities. Currently supported data formats are DICOM (http://dicom.nema.org/) and NIFTI (http://nifti.nimh.nih.gov/nifti-1). </li>  
  <li>Rendering the data is done using VTK (http://www.vtk.org/), making it the third dependency. VTK has been specifically designed for medical image data and it utilizes various hardware rendering techniques which make applications developed on it very fluid. </li>  
  <li>CMake (https://cmake.org/) is used to configure the project. This is the industry standard for cross-platform compilation.</li>  
  <li>OpenCV (https://opencv.org)
  <li>A C++ compiler (we develop on MSVC/2013 and GCC/4.9.2). 
</ol>

--------

### <a name="cppIntegration">Integrating your C++ application into CaPTk</a>
Let’s say the name of your application is <b>yourSourceApp</b>. The following steps highlight the steps required for you to integrate your application into CaPTk:

<ul style="list-style-type:disc">

  <li>Input and Output of files is handled by the graphical layer, which takes into account file handling, directory sorting, etc. so you can worry about the important stuff, i.e., your algorithm. </li>
  <li>We are currently developing actively on MSVC/12 - Visual Studio 2013 (https://www.microsoft.com/en-US/download/details.aspx?id=44914) and GCC/4.9.2. Plans are in motion to migrate to MSVC/14 - Visual Studio 2015 (https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx) and GCC/5.x very soon, upon which all C++11 features (https://en.wikipedia.org/wiki/C%2B%2B11) will be enabled by default. </li>
  <li>The graphical layer reads DICOM or NIfTI files and passes it on as an ITK-Image (http://www.itk.org/Doxygen/html/classitk_1_1Image.html). The data type defaults to the same type in which the original image was written. This is done using the ITK-ImageIOBase class (http://www.itk.org/Doxygen/html/classitk_1_1ImageIOBase.html). </li>
  <li>Your application should read either a single ITK-Image or a vector (http://www.cplusplus.com/reference/vector/vector/) of ITK-Images and give output in a similar format (either a single ITK-Image or a vector of ITK-Images). </li>
  <li><b>yourSourceApp</b> should be structured as a single class, i.e., a collection of <b>yourSourceApp.h</b> and <b>yourSourceApp.cpp</b> (ensure that the extensions match up otherwise CMake won’t pick them up as valid applications). Put the class implementation in the following folder - <b>$PROJECT_SOURCE_DIR/src/applications</b> and let CMake pick your application up in the next compilation step. </li>
  <li>If your algorithm does any kind of compilation or builds dependencies (libraries, executables, etc.), ensure that all the new files (non-source code files) are generated out-of-source. This is done to ensure that packaging the final application can happen in a concurrent manner.</li>
  <li>CaPTk is able to handle application-specific dependencies well. For example, if you prefer the SVM implementation of LibSVM (https://github.com/cjlin1/libsvm) rather than that of OpenCV (http://docs.opencv.org/2.4/modules/ml/doc/support_vector_machines.html), you can simply create a new folder called /yourSourceApp_includes under <b>$PROJECT_SOURCE_DIR/src/applications</b> and let CMake take care of the configuration. <b>yourSourceApp</b> will see the includes as if it was present in the same folder (i.e., no need to specify folder when including these dependencies). </li>
</ul>

--------

### <a name="pyIntegration">Integrating your Python application into CaPTk</a>
Let’s say the name of your application is <b>yourPythonApp</b>. The following steps give a brief high-level overview regarding the steps required for integrating it with CaPTk:

<ul style="list-style-type:disc">

  <li>Input and Output of files is handled by the graphical layer, which takes into account file handling, directory sorting, etc. so you can worry about the important stuff, i.e., your algorithm. </li>
  <li>For interpreted languages such as Python, the graphical layer writes a NIfTI file (yes, there is disk I/O, yes it is inefficient, yes it is stupid but there is no other way around it so just deal with it). </li>
  <li>Your application should be structured as a single <b>yourPythonApp.py</b> script (can be a class or pipeline). This should be present in the <b>$PROJECT_SOURCE_DIR/src/applications/py</b> directory. Your application should also have a file analogous to the setup.py (https://pythonhosted.org/an_example_pypi_project/setuptools.html) file used in Python projects by the name <b>yourPythonApp_setup.py</b>.  </li>
  <li>The Python configuration creates a virtual environment in the <b>$PROJECT_BINARY_DIR/py</b> directory, where all the dependencies are constructed.  </li>
  <li>Your application should support command line interfaces properly (verbose parameters throughout at the very least). </li>
  <li>Add a new application under the <b>APP_LIST_PY_GUI</b> in <code>CaPTk_source_code/src/applications/CMakeLists.txt</code> and then make the corresponding addition in the <code>fMainWindow</code> and <code>ui_fMainWindow</code> class (take LIBRA as a starting point).</li>
  <li>Once you have a menu item and the corresponding function call for your application, you can recompile CaPTk and then it will be able to pick up your application</li>
</ul>

--------



\htmlonly
<div align="right"><a href="Download.html"><b>Next (Download)<b></a>
\endhtmlonly


**/
