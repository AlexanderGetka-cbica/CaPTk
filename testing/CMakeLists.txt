# add source code include directories
INCLUDE_DIRECTORIES(
  ${PROJECT_SOURCE_DIR}/src/
  ${PROJECT_SOURCE_DIR}/src/applications/
  ${PROJECT_SOURCE_DIR}/src/applications/py
  ${PROJECT_SOURCE_DIR}/src/applications/common_includes/
  ${PROJECT_SOURCE_DIR}/src/cbica_toolkit/
  ${APPLICATION_INCLUDES}
)

SET( TEST_EXE_NAME CaPTk_Tests )

# add c++11 flag if it is GCC v<5
IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
    INCLUDE( CheckCXXCompilerFlag )
    CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    IF( COMPILER_SUPPORTS_CXX11 )
	MESSAGE(STATUS "Compiler ${CMAKE_CXX_COMPILER} version ${CMAKE_CXX_COMPILER_VERSION} supports C++11")
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    elseif(COMPILER_SUPPORTS_CXX0X )
	MESSAGE(STATUS "Compiler ${CMAKE_CXX_COMPILER} version ${CMAKE_CXX_COMPILER_VERSION} supports C++0x")
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
    	MESSAGE(ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
  ELSE(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
	MESSAGE(STATUS "Compiler ${CMAKE_CXX_COMPILER} version ${CMAKE_CXX_COMPILER_VERSION} is above 5.0, known support for C++11, C++0x")
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
  ENDIF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)
ENDIF() 


#set(CMAKE_AUTOMOC ON)    
 
SET(GUI_SOURCES_DIR "${PROJECT_SOURCE_DIR}/src/gui")
SET(GUI_SOURCES_UPDATED ${GUI_SOURCES} )
FOREACH(gui_tool ${UI_ELEMENTS})
  
  IF( EXISTS "${GUI_SOURCES_DIR}/ui_${gui_tool}.h" )
    SET(
      GUI_SOURCES_UPDATED 
      ${GUI_SOURCES_UPDATED} 
      "${GUI_SOURCES_DIR}/ui_${gui_tool}.h"
      CACHE STRING "All UI elements" FORCE
    )
  ENDIF()
  IF( EXISTS "${GUI_SOURCES_DIR}/${gui_tool}.cpp" )
    SET(
      GUI_SOURCES_UPDATED 
      ${GUI_SOURCES_UPDATED} 
      "${GUI_SOURCES_DIR}/${gui_tool}.cpp"
      CACHE STRING "All UI elements" FORCE
    )
  ENDIF()
  IF( EXISTS "${GUI_SOURCES_DIR}/${gui_tool}.h" )
    SET(
      GUI_SOURCES_UPDATED 
      ${GUI_SOURCES_UPDATED} 
      "${GUI_SOURCES_DIR}/${gui_tool}.h"
      CACHE STRING "All UI elements" FORCE
    )
    
    QT4_WRAP_CPP(GUI_SOURCES_UPDATED 
    "${GUI_SOURCES_DIR}/${gui_tool}.h"
    )
  ENDIF()
  
ENDFOREACH(gui_tool)

ADD_EXECUTABLE(${TEST_EXE_NAME} AllTests.cxx 
      ${CBICA-TK_SOURCES}
      ${APPLICATION_SOURCES}
      ${APPLICATION_DEPENDS}
      ${GUI_SOURCES_UPDATED} 
      )

FIND_PACKAGE(Qt4 REQUIRED)
INCLUDE(UseQt4)
INCLUDE(${QT_USE_FILE})
SET(QT_USE_QTGUI TRUE)
SET(QT_USE_QTMAIN TRUE) 
SET(QT_USE_QTGUI TRUE)
ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS(-DQT_PLUGIN)
ADD_DEFINITIONS(-DQT_THREAD_SUPPORT)
LINK_DIRECTORIES(${QT_LIBRARY_DIR})

TARGET_LINK_LIBRARIES(${TEST_EXE_NAME} ${DEPENDENT_LIBS})

#ADD_TEST(NAME TestNumber1 COMMAND CaPTk_Console --run_test "random")

# buffer test
ADD_TEST(NAME BufferTest COMMAND ${TEST_EXE_NAME} --bufferTest "random")

# geodesic test
ADD_TEST(NAME GeodesicTest COMMAND ${TEST_EXE_NAME} --geodesic "random")

# edgfr test
ADD_TEST(NAME EGFRvIIITest COMMAND ${TEST_EXE_NAME} --egfrviii "random")
